{"version":3,"sources":["StartPage.tsx","Experience.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","StartPage","success","useState","dificulty","setDificulty","numberOfTotalWords","Object","values","data","map","val","length","reduce","sum","Heading","type","style","height","minValue","maxValue","onChange","number","defaultValue","to","Button","ExperienceTitle","CardImage","img","getRandomNwords","words","shuffle","splice","LearningCard","wordSwedish","wordEnglish","sentenceSwedish","sentenceEnglish","wordSound","sentenceSound","image","onNextClick","src","title","AudioButton","url","autoPlay","description","actions","onClick","Card","QuizCard","onFailure","onSuccess","wrongAnswers","answers","ListChoice","selectable","key","LearningCards","setLearningMode","numberOfWords","learnWordIndex","setLearnWordIndex","QuizCards","allWordsWithoutShowedOne","allWords","history","setPreviousAnswerStatus","useHistory","wordsQuiz","setWordsQuiz","console","log","filter","word","err","push","random3WrongAnswers","_","i","audio","Audio","useEffect","play","pause","Experience","useParams","keys","learningMode","Math","floor","random","groupName","group","selectedWords","previousAnswerStatus","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b146159.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"@kiwicom/orbit-components\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { Heading } from \"@kiwicom/orbit-components/\";\nimport data from \"./scrappedData.json\";\nimport Stepper from \"@kiwicom/orbit-components/lib/Stepper\";\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n`;\n\nexport function StartPage({ success = false }) {\n  const [dificulty, setDificulty] = useState(6);\n  const numberOfTotalWords = Object.values(data)\n    .map((val) => val.length)\n    .reduce((sum, val) => sum + val, 0);\n\n  const onDificultyChange = (number) => {\n    setDificulty(number);\n  };\n  return (\n    <Container>\n      <Heading type=\"display\">Swedish Vocabulary Improver 3000</Heading>\n      <Heading type=\"display\">{numberOfTotalWords} Core Words to Learn</Heading>\n      <div style={{ height: 50 }}>\n        <Stepper\n          minValue={2}\n          maxValue={25}\n          onChange={onDificultyChange}\n          defaultValue={dificulty}\n        />\n      </div>\n      {success && <Heading type=\"display\">Great! You Made It</Heading>}\n      <Link to={`/experience/${dificulty}`}>\n        <Button>{success ? \"Improve Again\" : \"Improve\"}</Button>\n      </Link>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport data from \"./scrappedData.json\";\nimport Card, { CardSection } from \"@kiwicom/orbit-components/lib/Card\";\nimport styled from \"styled-components\";\nimport { Button, Heading, ListChoice } from \"@kiwicom/orbit-components/\";\nimport { shuffle } from \"lodash\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 300px;\n  margin: auto;\n`;\n\nconst ExperienceTitle = styled(Heading)`\n  padding: 20px 10px;\n`;\n\nconst CardImage = styled.img``;\n\nfunction getRandomNwords(number, words) {\n  const wordsShuffled = shuffle(words);\n  return wordsShuffled.splice(0, number);\n}\n\nfunction LearningCard({\n  wordSwedish,\n  wordEnglish,\n  sentenceSwedish,\n  sentenceEnglish,\n  wordSound,\n  sentenceSound,\n  image,\n  onNextClick,\n}) {\n  return (\n    <Container>\n      <CardImage src={image} />\n      <Card\n        title={\n          <div>\n            {wordSwedish}\n            <AudioButton url={wordSound} autoPlay />\n          </div>\n        }\n        description={wordEnglish}\n        actions={<Button onClick={onNextClick}>Next</Button>}\n      >\n        <CardSection\n          title={\n            <div>\n              {sentenceSwedish}\n              <AudioButton url={sentenceSound} />\n            </div>\n          }\n          description={sentenceEnglish}\n        ></CardSection>\n      </Card>\n    </Container>\n  );\n}\n\nfunction QuizCard({\n  wordSwedish,\n  wordEnglish,\n  sentenceSwedish,\n  wordSound,\n  sentenceSound,\n  onFailure,\n  onSuccess,\n  wrongAnswers,\n}) {\n  const answers = shuffle([\n    <ListChoice\n      title={wordEnglish}\n      selectable\n      onClick={onSuccess}\n      key={wordEnglish}\n    />,\n    <ListChoice\n      title={wrongAnswers[0]?.wordEnglish}\n      key={wrongAnswers[0]?.wordEnglish}\n      selectable\n      onClick={onFailure}\n    />,\n    <ListChoice\n      title={wrongAnswers[1]?.wordEnglish}\n      key={wrongAnswers[1]?.wordEnglish}\n      selectable\n      onClick={onFailure}\n    />,\n    <ListChoice\n      title={wrongAnswers[2]?.wordEnglish}\n      key={wrongAnswers[2]?.wordEnglish}\n      selectable\n      onClick={onFailure}\n    />,\n  ]);\n  return (\n    <Container>\n      <Card\n        title={\n          <div>\n            {wordSwedish}\n            <AudioButton url={wordSound} autoPlay />\n          </div>\n        }\n      >\n        <CardSection>{answers}</CardSection>\n      </Card>\n    </Container>\n  );\n}\n\nfunction LearningCards({ words, setLearningMode, numberOfWords }) {\n  const [learnWordIndex, setLearnWordIndex] = useState(0);\n  function nextLearningStep() {\n    if (learnWordIndex === numberOfWords - 1) {\n      setLearningMode(false);\n    } else {\n      setLearnWordIndex(learnWordIndex + 1);\n    }\n  }\n  return (\n    <LearningCard {...words[learnWordIndex]} onNextClick={nextLearningStep} />\n  );\n}\n\nfunction QuizCards({ words, allWords, setPreviousAnswerStatus }) {\n  let history = useHistory();\n\n  const [wordsQuiz, setWordsQuiz] = useState([\n    ...getRandomNwords(words.length, words),\n    ...getRandomNwords(words.length, words),\n  ]);\n  console.log(allWords);\n\n  let allWordsWithoutShowedOne;\n  try {\n    allWordsWithoutShowedOne = allWords.filter(\n      (word) => word.wordSwedish !== wordsQuiz[0].wordSwedish\n    );\n  } catch (err) {\n    history.push(\"/success\");\n  }\n\n  const random3WrongAnswers = getRandomNwords(3, allWordsWithoutShowedOne);\n\n  function onSuccess() {\n    setWordsQuiz(wordsQuiz.filter((_, i) => i !== 0));\n  }\n\n  function onFailure() {\n    setWordsQuiz(shuffle(wordsQuiz));\n  }\n  return (\n    <>\n      <ExperienceTitle type=\"\">{wordsQuiz.length} cards left</ExperienceTitle>\n      <QuizCard\n        {...wordsQuiz[0]}\n        onFailure={onFailure}\n        onSuccess={onSuccess}\n        wrongAnswers={random3WrongAnswers}\n      />\n    </>\n  );\n}\n\nfunction AudioButton({ url, autoPlay = false }) {\n  const audio = new Audio(url);\n  useEffect(() => {\n    autoPlay && audio.play();\n    return function () {\n      audio.pause();\n    };\n  }, [audio, autoPlay]);\n  function onClick() {\n    audio.play();\n  }\n  return <button onClick={onClick}>play</button>;\n}\n\nexport function Experience() {\n  const { dificulty } = useParams();\n  const words = data;\n  const keys = Object.keys(words);\n  const [learningMode, setLearningMode] = useState(true);\n  const [groupName] = useState(keys[Math.floor(Math.random() * keys.length)]);\n  const group = words[groupName];\n  const [selectedWords] = useState(getRandomNwords(dificulty, group));\n  const [previousAnswerStatus, setPreviousAnswerStatus] = useState(\"\");\n\n  return (\n    <>\n      <ExperienceTitle type=\"display\">{groupName}</ExperienceTitle>\n      {learningMode ? (\n        <LearningCards\n          numberOfWords={dificulty}\n          words={selectedWords}\n          setLearningMode={setLearningMode}\n        />\n      ) : (\n        <>\n          {previousAnswerStatus}\n          <QuizCards\n            words={selectedWords}\n            allWords={group}\n            setPreviousAnswerStatus={setPreviousAnswerStatus}\n          />{\" \"}\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { StartPage } from \"./StartPage\";\nimport { Experience } from \"./Experience\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <StartPage />\n      </Route>\n      <Route path=\"/experience/:dificulty\" render={() => <Experience />} />\n      <Route path=\"/success\" render={() => <StartPage success={true} />} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}